# Configuration tested with rTorrent/libtorrent version: 0.9.2/0.13.2
# May be incompatible with older rTorrent

# Maximum and minimum number of peers to connect to per torrent.
min_peers = 50
max_peers = 200

# Same as above but for seeding completed torrents (-1 = same as downloading)
min_peers_seed = 1
max_peers_seed = 3

# Maximum number of simultanious connections global.
# max_uploads_global = 250
# max_downloads_global = 500

# Maximum number of simultanious uploads per torrent.
max_uploads = 15

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 0

# Maximum active torrents
# scheduler.max_active.set = 10

# network.max_open_files.set = 512
# network.max_open_sockets.set = 512

# send_buffer_size = 4096
# receive_buffer_size = 4096

# Maximum memory usage (512MB)
# max_memory_usage = 524288

# Default directory to save the downloaded torrents.
directory = ~/Downloads/rtorrent/incomplete

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session = ~/.rtorrent/session

# Watch a directory for new torrents, restart torrents that have been
# copied back and stop those that have been deleted.
# Also, enable removal for all downloads added from this watch directory.
schedule = watch_directory,5,5,"load_start=~/Downloads/rtorrent/*.torrent,d.set_custom1=1"
#schedule = tied_directory,5,5,start_tied=
#schedule = untied_directory,5,5,close_untied=

# Preallocate files; reduces defragmentation on filesystems.
system.file_allocate.set = yes

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=2048M

# Set every torrent download directory to "$d.get_name.$d.get_hash" subdirectory
# This avoid problem when multiple started torrents have the same base path
system.method.insert  = download_dir,simple,"cat=~/Downloads/rtorrent/incomplete/,$d.get_name=,.,$d.get_hash="
system.method.insert  = completed_dir,simple,"cat=~/Downloads/rtorrent/completed/,$d.get_name=,.,$d.get_hash="
system.method.set_key = event.download.inserted,set_new_directory,"d.set_directory=$download_dir="
# Workaround for "Failed to prepare file list: Could not create directory" bug
system.method.set_key = event.download.inserted,create_download_dir,"branch=d.is_multi_file=,\"execute={mkdir,-p,--,$download_dir=}\""

# WARNING: Do not use this setup if you ever change a download's dir
# to something like /home/bob/ or similar, or you could lose a lot of files!
# Clear custom1 when download completes.
system.method.set_key = event.download.finished,unset_delete_flag,"d.set_custom1="
# Erase data files when a download is removed that still has custom1 set.
#system.method.set_key = event.download.erased,delete_removed,"branch=d.get_custom1=,\"execute={rm,-rf,--,$download_dir=}\""

# Move completed torrents to "~/Downloads/rorrent/completed"
# For MacOSX and *BSD
system.method.set_key = event.download.finished,move_completed,"d.set_directory=$completed_dir=;execute=mv,-n,$download_dir=,~/Downloads/rtorrent/completed"
# For Linux use this
#system.method.set_key = event.download.finished,move_completed,"d.set_directory=$completed_dir=;execute=mv,-u,$download_dir=,~/Downloads/rtorrent/completed"

# Send e-mail for completed downloads
# First and only argument to mail.sh is completed file's name (d.get_name)
system.method.set_key = event.download.finished,notify_me,"execute=~/.rtorrent/hooks/mail.sh,$d.get_name="


# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

# Port range to use for listening.
port_range = 6890-6999

# Start opening ports at a random position within the port range.
#port_random = no

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
check_hash = yes

# Set whetever the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = allow_incoming,try_outgoing,enable_retry,prefer_plaintext

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
#
dht = auto

# UDP port to use for DHT.
#
dht_port = 6881

# Enable peer exchange (for torrents not marked private)
#
peer_exchange = yes

#
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the read
# pages in memory thus end up trashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10

# Logging
log.execute = ~/.rtorrent.log

